var orders_table;
var selected_tests = {};

function activateDataTable() {
    orders_table = jQuery('#lab-orders').DataTable({
        fixedHeader: true,
        searching: false,
        paging: false,
        scroller: {
            loadingIndicator: true
        }
    });
}

function changeCancelBTN() {
  var c = document.getElementById('cancelButton');
  var cancelAttributes = c.getAttribute('onmousedown');
  c.setAttribute('onmousedown', 'changeCancelBG();' + cancelAttributes);
}

function changeCancelBG() {
  var e = document.getElementById('messageBar');
  e.style = 'background-color: tomato; border-color: tomato;';
}

function buildLabOrderDisplay() {
    changeCancelBTN();
    var clearBTN = document.getElementById('clearButton');
    clearButton.style = 'display: none;';

    var f = document.getElementById('inputFrame' + tstCurrentPage);
    f.style = 'width: 96%; height: 88%;';

    var table = document.createElement('table');
    table.setAttribute('id', 'lab-orders');
    f.appendChild(table);

    var thead = document.createElement('thead');
    table.appendChild(thead);

    var tr = document.createElement('tr');
    thead.appendChild(tr);

    var heads = ['Test name', 'Tracking#', 'Status', 'Order date', 'Result'];
    for (var i = 0; i < heads.length; i++) {
        var th = document.createElement('th');
        th.innerHTML = heads[i];
        tr.appendChild(th);

        if (i == 1)
            th.setAttribute("class", "tracking-number-columns");

        if (i == 2)
            th.setAttribute("class", "status-columns");

        if (i == 0)
            th.setAttribute("class", "test-columns");

        if (i == 4)
            th.setAttribute("class", "results-columns");

        if (i == 3)
            th.setAttribute("class", "date-columns");

    }
    activateDataTable();


    addCreateOrderBTN();
    fetchOrders();
}

function addCreateOrderBTN() {
    var root = document.getElementById('buttons');
    var order = document.createElement('button');
    order.setAttribute('onmousedown', 'pressOrder();');
    order.setAttribute('id', 'pressOrder');
    order.innerHTML = '<span>Order</span>';
    order.setAttribute('class', 'button blue navButton');
    root.appendChild(order);

    var nextButton = document.getElementById('nextButton');
    var nextButtonAttribute = nextButton.getAttribute('onmousedown');
    nextButton.setAttribute('onmousedown', "removeOrderButton();" + nextButtonAttribute);
}

function removeOrderButton() {
  var root = document.getElementById('buttons');
  var button = document.getElementById('pressOrder');
  root.removeChild(button);

}

function pressOrder() {
    var orderBox = document.createElement('div');
    orderBox.setAttribute('id', 'orders-box');

    var orderCover = document.createElement('div');
    orderCover.setAttribute('id', 'orders-cover');

    var container = document.createElement('div');
    container.setAttribute('id', 'orders-container');
    orderBox.appendChild(container);

    var orderNavBar = document.createElement('div');
    orderNavBar.setAttribute('id', 'orders-nav-bar');
    orderBox.appendChild(orderNavBar);

    var windowBody = document.getElementsByTagName('body')[0];
    try {
        var div1 = document.getElementById('orders-box');
        var div2 = document.getElementById('orders-cover');
        windowBody.removeChild(div1);
        windowBody.removeChild(div2);
    } catch (e) {
    }

    windowBody.appendChild(orderBox);
    windowBody.appendChild(orderCover);
    orderCover.style = 'display: inline;';
    orderBox.style = 'display: inline;';

    addNavButtons(orderNavBar);
    fetchAvailableTests();
}

function addNavButtons(ordersNavBar) {
    var nextB = document.createElement('button');
    nextB.innerHTML = '<span>Order test(s)</span>';
    nextB.setAttribute('class', 'button green navButton nav-orders-btns');
    nextB.setAttribute('onmousedown', 'createOrders(this);');
    nextB.setAttribute('id', 'next-button');
    ordersNavBar.appendChild(nextB);

    var cancelB = document.createElement('button');
    cancelB.innerHTML = '<span>Cancel order</span>';
    cancelB.style = 'float: left; left: 5px;';
    cancelB.setAttribute('class', 'button red navButton nav-orders-btns');
    cancelB.setAttribute('onmousedown', 'cancelLabOrder();');
    ordersNavBar.appendChild(cancelB);
}

function cancelLabOrder() {
    var windowBody = document.getElementsByTagName('body')[0];
    var div1 = document.getElementById('orders-box');
    var div2 = document.getElementById('orders-cover');
    windowBody.removeChild(div1);
    windowBody.removeChild(div2);

    try {
        var cover = document.getElementById('submit-cover');
        cover.style = 'display: none;';
    } catch (e) {
    }
}

function displayT(tests) {
    var container = document.getElementById('orders-container');

    var div = document.createElement('div');
    divCSS = "height: 620px; width: 98%;";
    divCSS += "border: solid 1px; padding: 10px;";
    divCSS += "border-radius: 9px;";
    div.style = divCSS;
    container.appendChild(div);

    var cells = ['tests-left', 'tests-right'];
    for (var i = 0; i < cells.length; i++) {
        var cell = document.createElement('div');
        cellCSS = 'vertical-align: top;';
        var width = (i == 1 ? '50%;' : '45%;');
        cellCSS += 'height: 595px; width: ' + width;
        cellCSS += 'padding-left: 5px; overflow-x: hidden;';
        cell.style = cellCSS;
        cell.setAttribute('id', cells[i]);
        div.appendChild(cell);
    }
    addLefttable(tests);
    addMainReasonForTests();
}

function addMainReasonForTests() {
    var container = document.getElementById('tests-right');
    container.setAttribute('class', 'options');

    var div = document.createElement('div');
    div.style = 'text-align: center;border-style: solid;border-width: 0px 0px 1px 0px;';
    div.innerHTML = 'Main test(s) reason';
    container.appendChild(div);

    var ul = document.createElement('ul');
    ul.setAttribute('style', 'opacity: 0.4;');
    container.appendChild(ul);

    var reasons = ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Reapet / Missing'];
    for (var i = 0; i < reasons.length; i++) {
        var oddEven = (i & 1) ? "odd" : "even";

        var li = document.createElement('li');
        li.innerHTML = reasons[i];
        li.setAttribute('value', reasons[i]);
        li.setAttribute('reason', reasons[i]);
        li.setAttribute('id', i);
        li.setAttribute('class', 'test-reasons ' + oddEven);
        li.setAttribute('onmousedown', "selectReason(this);");
        ul.appendChild(li);
    }

    var selectedTestDisplay = document.createElement('div');
    selectedTestDisplay.setAttribute('id', 'selected-tests-display');
    selectedTestDisplay.innerHTML = '&nbsp;';
    container.appendChild(selectedTestDisplay);
}

function selectReason(e) {
    var reasonDIV = document.getElementById('tests-right');
    var UL = reasonDIV.getElementsByTagName('ul')[0];
    var cssStyle = UL.getAttribute('style');
    if (cssStyle.match(/opacity/i)) {
        showMessage('Select test before select reason');
        return;
    }

    var list = document.getElementsByClassName('test-reasons');
    for (var i = 0; i < list.length; i++) {
        list[i].style = 'background-color: "";';
    }

    e.style = 'background-color: lightblue;';
    for (var t in selected_tests) {
        if (selected_tests[t] == null) {
            selected_tests[t] = e.getAttribute('reason');
        }
    }

    disableReasons();
    enableTestDIV();
}

function addUntickBox(th, i) {
    var img = document.createElement('img')
    img.setAttribute('id', 'order-' + i);
    img.setAttribute('src', '/public/touchscreentoolkit/lib/images/unticked.jpg');
    img.style = 'width: 25px; height: 25px;';
    th.appendChild(img);
}

function addLefttable(tests) {

    var table = document.createElement('table');
    table.setAttribute('class', 'tests-tables');
    var container = document.getElementById('tests-left');
    container.appendChild(table);

    for (var i = 0; i < tests.sort().length; i++) {
        var tr = document.createElement('tr');
        table.appendChild(tr);

        var td = document.createElement('td');
        /* .......... */
        var minTable = document.createElement('table');
        minTable.style = 'width: 100%;';
        var minTr = document.createElement('tr');
        minTable.appendChild(minTr);
        var minTH = document.createElement('th');
        minTH.style = "text-align: center; width: 5px;border-style: solid; border-width: 0px;";
        addUntickBox(minTH, i);
        minTr.appendChild(minTH);

        var minTD = document.createElement('td');
        minTD.innerHTML = tests[i];
        minTD.style = 'padding-left: 10px;';
        minTr.appendChild(minTD);

        td.appendChild(minTable);
        /* .......... */

        td.setAttribute('class', 'tests-containers');
        td.setAttribute('onmousedown', 'selectTest(this);');
        td.setAttribute('test-selected', 'false');
        td.setAttribute('id', 'test-' + i);
        tr.appendChild(td);
    }
}

function selectTest(e) {
    var selected = e.getAttribute('test-selected');
    var img = document.getElementById('order-' + e.id.split('-')[1]);
    var testDIV = document.getElementById('tests-left');
    var cssStyle = testDIV.getAttribute('style');
    if (cssStyle.match(/opacity/i)) {
        showMessage('Select test reason to continue');
        return;
    }


    if (selected == 'false') {
        e.style = 'background-color: lightblue;';
        e.setAttribute('test-selected', 'true');
        img.setAttribute('src', '/public/touchscreentoolkit/lib/images/ticked.jpg');

        testDIV.style = cssStyle += 'opacity: 0.4;';
        var selected = e.getElementsByTagName('td')[0];
        selected_tests[selected.innerHTML] = null;
        enableReasons();
        resetReasonSelection();
    } else {
        e.style = 'background-color: ""';
        e.setAttribute('test-selected', 'false');
        img.setAttribute('src', '/public/touchscreentoolkit/lib/images/unticked.jpg');
        disableReasons();
        var selected = e.getElementsByTagName('td')[0];
        removeTest(selected.innerHTML);
    }
}

function disableReasons() {
    var reasonDIV = document.getElementById('tests-right');
    var UL = reasonDIV.getElementsByTagName('ul')[0];
    UL.setAttribute('style', 'opacity: 0.4;');
    resetReasonSelection();
    displayReasons();
}

function enableReasons() {
    var reasonDIV = document.getElementById('tests-right');
    var UL = reasonDIV.getElementsByTagName('ul')[0];
    UL.setAttribute('style', '');
}


function enableTestDIV() {
    var testDIV = document.getElementById('tests-left');
    var css = "vertical-align: top;";
    css += "height: 595px;";
    css += "width: 45%;";
    css += "padding-left: 5px;";
    css += "overflow-x: hidden;";
    testDIV.setAttribute('style', css);
}

function disableTestDIV() {
    var testDIV = document.getElementById('tests-left');
    var css = testDIV.getAttribute('style');
    testDIV.setAttribute('style', css + "opacity: 0.4;");
}

function resetReasonSelection() {
    var list = document.getElementsByClassName('test-reasons');
    for (var i = 0; i < list.length; i++) {
        list[i].style = 'background-color: "";';
    }
}

function displayReasons() {
    var div = document.getElementById('selected-tests-display');
    div.innerHTML = null;

    var table = document.createElement('table');
    table.style = 'width: 99%;';
    div.appendChild(table);

    var tr = document.createElement('tr');
    table.appendChild(tr);

    var cells = ['Test', 'Reason'];
    for (var i = 0; i < cells.length; i++) {
        var th = document.createElement('th');
        th.innerHTML = cells[i]
        tr.appendChild(th)
    }

    for (var test in selected_tests) {
        var tr = document.createElement('tr');
        table.appendChild(tr)

        var td = document.createElement('td');
        td.innerHTML = test;
        tr.appendChild(td)

        var td = document.createElement('td');
        td.innerHTML = selected_tests[test];
        tr.appendChild(td)
    }
}

function removeTest(test) {
    var temp = selected_tests;
    selected_tests = {}
    for (var t in temp) {
        if (test == t)
            continue;

        selected_tests[t] = temp[t];
    }
    displayReasons();
}

/* ............................ */


function fetchAvailableTests() {
    var url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1";
    url += '/programs/1/lab_tests/types';

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obs = JSON.parse(this.responseText);
            displayT(obs);
        }
    };
    xhttp.open("GET", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send();
}

function createOrders(e) {
    var valid_selection = true;
    var not_selection_done = isHashEmpty(selected_tests);

    if (not_selection_done == true) {
        showMessage("Select test(s) to continue");
        return;
    }

    for (var test in selected_tests) {
        if (selected_tests[test] == null) {
            showMessage('Add a test reason for ' + test);
            return
        }
    }

    e.setAttribute('onmousedown', '');
    createEncounter();
}

function createEncounter() {
    var currentTime = moment().format(' HH:mm:ss');
    var encounter_datetime = moment(sessionStorage.sessionDate).format('YYYY-MM-DD');
    encounter_datetime += currentTime;

    var encounter = {
        encounter_type_name: 'LAB ORDERS',
        encounter_type_id: 57,
        patient_id: sessionStorage.patientID,
        encounter_datetime: encounter_datetime
    }

    submitParameters(encounter, "/encounters", "createLabOrders");
}


function createLabOrders(encounter) {
    var url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1";
    url += '/programs/1/lab_tests/orders?patient_id=' + sessionStorage.patientID;
    var lab_orders_data = []
    for (var test_name in selected_tests){
        test_reason = selected_tests[test_name];
        data = {
            "test_type": test_name,
            "reason": test_reason
        }

        lab_orders_data.push(data)
    }

    var parameters = {
        encounter_id: encounter.encounter_id,
        tests: lab_orders_data,
        date: sessionStorage.sessionDate,
        requesting_clinician: sessionStorage.username
    };

    var parametersPassed = JSON.stringify(parameters);

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            try {
              var messageBar = document.getElementById('messageBar');
              messageBar.style = 'background-color: green; border-color: lightgreen;';
            }catch(s){}
            showMessage('Order(s) successful done.');
            cancelLabOrder();
        }
    };
    xhttp.open("POST", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send(parametersPassed);
}

function postOrders(encounter, test, reason) {
    var url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1";
    url += '/programs/1/lab_tests/orders?patient_id=' + sessionStorage.patientID;

    var parameters = {
        encounter_id: encounter.encounter_id,
        test_types: [test],
        date: sessionStorage.sessionDate,
        reason: reason,
        requesting_clinician: sessionStorage.username
    };

    var parametersPassed = JSON.stringify(parameters);

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obs = JSON.parse(this.responseText);
            sortOrders(encounter);
        }
    };
    xhttp.open("POST", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send(parametersPassed);
}

function fetchOrders() {
    var url = apiProtocol + "://" + apiURL + ":" + apiPort + "/api/v1";
    url += "/programs/1/lab_tests/orders?patient_id=" + sessionStorage.patientID;

    var xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && (this.status == 201 || this.status == 200)) {
            var obj = JSON.parse(this.responseText);
            updateOrderTable(obj);
        }
    };
    xhttp.open("GET", url, true);
    xhttp.setRequestHeader('Authorization', sessionStorage.getItem("authorization"));
    xhttp.setRequestHeader('Content-type', "application/json");
    xhttp.send();
}

function updateOrderTable(orders) {

    for (var x = 0; x < orders.length; x++) {
        var tests = orders[x].tests;
        for (var i = 0; i < tests.length; i++) {
            var accession_number = orders[x].accession_number;
            var test_name = tests[i].test_type;
            var test_status = tests[i].test_status.toUpperCase();
            var test_values = tests[i].test_values
            var date_ordered = moment(orders[x].date_ordered).format('DD/MMM/YYYY');

            orders_table.row.add([test_name, accession_number, test_status,
                date_ordered, addResults(test_values)]).node().id = "lab-order-" + (i + x);
            orders_table.draw();
            addClasses((i + x));
        }
    }

    calculateVLreminder();
}

function addResults(results) {
    var parameters = [];
    for (var i = 0; i < results.length; i++) {
        var indicator = results[i].indicator;
        var value = results[i].value;
        if (indicator == 'result_date') {
            indicator = 'Result date'
            value = "(" + moment(results[i].value).format('DD/MMM/YYYY') + ")";
        }

        parameters.push(indicator + ": " + value);
    }
    return parameters.join('<br />');
}

function addClasses(i) {
    var row = document.getElementById('lab-order-' + i);
    var td = row.getElementsByTagName("td")[1];
    td.setAttribute("class", "tracking-number-columns");

    td = row.getElementsByTagName("td")[2];
    td.setAttribute("class", "status-columns");

    td = row.getElementsByTagName("td")[0];
    td.setAttribute("class", "test-columns");

    td = row.getElementsByTagName("td")[4];
    td.setAttribute("class", "results-columns");

    td = row.getElementsByTagName("td")[3];
    td.setAttribute("class", "date-columns");

    var rowClass = row.getAttribute('class');
    row.setAttribute('class', rowClass + " lab-orders");
}
